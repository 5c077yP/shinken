#! /bin/sh
### BEGIN INIT INFO
# Provides:          shinken-scheduler
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Shinken scheduler daemon
# Description:       Shinken is a monitoring tool and the Scheduler
#                    is one of its daemon. This one get configuration from the arbiter
#                    scheduler some checks and put them in queues for
#                    other daemons
### END INIT INFO

### BEGIN INIT INFO Redhat
# Shinken        Starts Shinken Scheduler
#
# chkconfig: 345 99 01
# description: Start Shinken scheduler daemon
### END INIT INFO

# Author: Gabes Jean <naparuba@gmail.com>
#         Olivier LI-KIANG-CHEONG <lkco@gezen.fr>


# Do NOT "set -e"
#set -x

NAME=shinken-scheduler

# Read configuration variable file if it is present
[ -r /etc/default/shinken ] && . /etc/default/shinken


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Start Shinken scheduler daemon"

#DAEMON is set in /etc/default/$NAME
#DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=" -d -r -c $SCHEDULERCFG"
#PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$SCHEDULERDAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
[ -r /lib/init/vars.sh ] && . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        #start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
	#	|| return 1
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
	#	$DAEMON_ARGS \
	#	|| return 2
        #DOn't like this start-stop thing. If someone know how it works,
        #just change the code below, thanks.
        $SCHEDULERDAEMON $DAEMON_ARGS
	return $?
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
#	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
#	RETVAL="$?"
#	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
#	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
#	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
#	rm -f $PIDFILE
#	return "$RETVAL"
        kill `cat $SCHEDULERPID`
	return $?
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

do_status() {
  if pidofproc -p "$SCHEDULERPID" >/dev/null; then
    log_action_end_msg 0 "running"
  else
    if [ -e "$SCHEDULERPID" ]; then
      log_action_end_msg 1 "$NAME failed"
    else
      log_action_end_msg 0 "not running"
    fi
  fi

}


case "$1" in
  start)
	[ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ -n "$VERBOSE" ] && [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	do_status
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
