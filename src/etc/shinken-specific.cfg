#This config file defined Shinken specific objects like
#satellites or Realms
#
#This file is for defined a simple environement :
#*one scheduler that schedule checks (but do not launch thems!)
#*one poller (that launch checks :) )
#*one reactionnner (that send notifiations)
#*one broker (that give jobs to modules, Modules do export data like logs, status.dat, mysql export, etc etc)
#* some of the brokers modules (that do the job :) )
#*one arbiter (that read the configuration and dispatch it to all others)

#So here no high availability, just a simple "Nagios equivalent" (but with 
#more perf and less code lines:) )

#The scheduler is a "Host manager". It get hosts and theirs
#services. It scheduler checks for them.
define scheduler{
       scheduler_name	scheduler-1   ; just the name 
       address	localhost             ; ip or dns address of the daemon
       port	7768                  ; tcp port of the daemon

       #optionnal
       spare	0                     ; optionnal (0 = no spare, 1 = is spare)
       weight		1             ; optionnal (some schedulers can manage more hosts than others)

       #advanced feature
       realm	All                   ; optionnal (realm are multisites features)
       }


#Poller are here to launch checks
define poller{
       poller_name	poller-1
       address  	localhost
       port     	7771

       #optionnal
       manage_sub_realms 0	; optionnal and advanced: take jobs from schedulers of sub realms?
       min_workers	 4	; optionnal : start with N processes workers
       max_workers	 4	; optionnal : no more than N processes workers
       processes_by_worker	256	   ; optionnal : each workers manage 256 checks
       polling_interval		1       ; optionnal : take jobs from schedulers each 1 second

       #advanced feature
       realm		All
}


#Reactionner launch notifications
define reactionner{
       reactionner_name		reactionner-1
       address			localhost
       port			7769
       spare			0

       #optionnal
       manage_sub_realms 0	;optionnal : like for poller
       min_workers	 1	;optionnal : like for poller
       max_workers	 15	;optionnal : like for poller
       polling_interval		1       ;optionnal : like for poller

       #optionnal
       realm 			All
       }

#The broker manage data export (in flat file or in database)
#with it's modules
#Here just log files and status.dat file modules
define broker{
       broker_name	broker-1
       address		localhost
       port		7772
       spare		0

       #Which modules to load? Here only status.dat and nagios.log
       modules		 Status-Dat, Simple-log

       #optionnal
       manage_sub_realms 1   ; optionnal, like for poller
       manage_arbiters	 1   ; optionnal : take data from Arbiter. There should be 
       			     ;only one broker for the arbiter
       
       #advanced
       realm 	All
       }


##Now the modules for broker. First the 2 that are used, and all the others :)

#The log managment for ALL daemons (all in one log, cool isn't it? ).
define module{
       module_name      Simple-log
       module_type      simple_log
       path		/usr/local/shinken/src/var/nagios.log
}


#Status.dat and objects.cache export. For the old Nagios 
#interface
define module{
       module_name		Status-Dat
       module_type		status_dat
       status_file		/usr/local/shinken/src/var/status.data
       object_cache_file	/usr/local/shinken/src/var/objects.cache
       status_update_interval   15 ; update status.dat every 15s
}

##All other modules thtat can be called if you have installed
#the databses, or if you want to test something else :)

#Here the NDO/MySQL module
#So you can use with NagVis or Centreon
define module{
       module_name	ToNdodb_Mysql
       module_type	ndodb_mysql
       database		ndo       ; database name
       user		root      ; user of the database
       password		root      ; must be changed
       host		localhost ; host to connect to
       character_set	utf8      ;optionnal, UTF8 is the default
}       


#Here a NDO/Oracle module. For Icinga web connexion
#Or for DBA that do not like MySQL
define module{
       module_name	ToNdodb_Oracle
       module_type	ndodb_oracle
       database		XE              ;database name (listener in fact)
       user		system          ;user to connect
       password		password        ;Yes I know I have to change my default password...
       oracle_home      /usr/lib/oracle/xe/app/oracle/product/10.2.0/server     ;optional, but can be useful
}


#Here for Merlin/MySQL. For the cool Ninja connexion
define module{
       module_name      ToMerlindb_Mysql
       module_type      merlindb
       backend          mysql    ;backend to use, here mysql databse
       database         merlin   ;database name
       user             root     ; ? .. yes, the user of the database...
       password         root     ; wtf? you ask?
       host		localhost ; host of the database
       character_set    utf8     ;optionnal, UTF8 is the default
}


#Here the Merlin/Sqlite. No one use it for now :)
#You look at something : it's also the merlindb module, like the previous,
#it's the same code, it's just the backend parameter that change (and path).
define module{
       module_name      ToMerlindb_Sqlite
       module_type      merlindb  
       backend		sqlite 	  ;like the mysql, but sqlite :)
       database_path    /tmp/merlindb.sqlite  ;path of the sqlite file
}


#Here the couchdb export. Maybe use one day...
#I should do a mangodb too one day...
#and casandra...
#and voldemort...
#and all other NoSQL database in fact :)
define module{
       module_name      ToCouchdb
       module_type      couchdb
       user             root
       password         root
       host		localhost
}


#Export services perfdata to flat file. for centreon or
#perfparse
define module{
       module_name      Service-Perfdata
       module_type      service_perfdata
       path		/usr/local/shinken/src/var/service-perfdata
}


#For hosts this time
#like the previous, but for hosts....
define module{
       module_name      Host-Perfdata
       module_type      host_perfdata
       path		/usr/local/shinken/src/var/host-perfdata
}


#You know livestatus? Yes, there a  Livestatus module for shinken too :)
define module{
       module_name      Livestatus
       module_type      livestatus
       host		*	; * = listen on all configured ip addresses
       port		50000   ; port to listen
}



#The arbiter definition is optionnal
#WARNING : You must change host_name with the
#hostname of your machine !!!!
define arbiter{
       arbiter_name	Arbiter-Master
       host_name	node1       ;result of the hostname command under Unix
       address		localhost		    ;IP od DNS adress
       port		7770
       spare		0
       }


#Very advanced feature for multisite managment.
#Consider look at the doc before touch it :)
define realm{
       realm_name  All
       default		1
}
