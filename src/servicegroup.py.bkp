from itemgroup import Itemgroup, Itemgroups

class Servicegroup(Itemgroup):
    id = 0
    def __init__(self, params={}):
        self.id = self.__class__.id
        self.__class__.id += 1
        for key in params:
            setattr(self, key, params[key])


    def clean(self):
        pass


    def pythonize(self):
        mbrs = self.members.split(',')        
        self.members = []
        for mbr in mbrs:
            self.members.append(mbr.strip())


    def get_services(self):
        return self.members


    def replace_members(self, members):
        self.members = members


    def add_string_member(self, member):
        self.members += ','+member


    def __str__(self):
        return str(self.__dict__)


    #a host group is correct if all members actually exists
    def is_correct(self):
        if not None in self.members:
            return True
        else:
            return False


    def has(self, prop):
        try:
            getattr(self,prop)
        except:
            return False
        return True


    def get_servicegroup_members(self):
        if self.has('servicegroup_members'):
            return self.servicegroup_members.split(',')
        else:
            return []


    #We fillfull properties with template ones if need
    def get_services_by_explosion(self, servicegroups):
        sg_mbrs = self.get_servicegroup_members()
        for sg_mbr in sg_mbrs:
            sg = servicegroups.find_sg_by_name(sg_mbr)
            if sg is not None:
                value = sg.get_services_by_explosion(servicegroups)
                if value is not None:
                    self.add_string_member(value)
        if self.has('members'):
            return self.members
        else:
            return ''



class Servicegroups(Itemgroups):
    servicegroups = {}
    def __init__(self, servicegroups):
        for cg in servicegroups:
            self.servicegroups[cg.id] = cg

    
    def find_sg_id_by_name(self, name):
        for id in self.servicegroups:
            if self.servicegroups[id].servicegroup_name == name:
                return id
        return None


    def __str__(self):
        s = ''
        for id in self.servicegroups:
            s += str(self.servicegroups[id])
        return s


    def find_sg_by_name(self, name):
        id = self.find_sg_id_by_name(name)
        if id is not None:
            return self.servicegroups[id]
        else:
            return None


    def add_servicegroup(self, cg):
        self.servicegroups[cg.id] = cg


    def linkify(self, services):
        self.linkify_sg_by_srv(services)


    def pythonize(self):
        for id in self.servicegroups:
            cg = self.servicegroups[id]
            cg.pythonize()


    #We just search for each host the id of the host
    #and replace the name by the id
    def linkify_sg_by_srv(self, services):
        for id in self.servicegroups:
            mbrs = self.servicegroups[id].get_services().split(',')

            #The new member list, in id
            new_mbrs = []
            seek = 0
            host_name = ''
            for mbr in mbrs:
                if seek % 2 == 0:
                    host_name = mbr
                else:
                    service_desc = mbr
                    find = services.find_srv_by_name_and_hostname(host_name, service_desc)
                    new_mbrs.append(find)
                seek += 1
            #We find the id, we remplace the names
            self.servicegroups[id].replace_members(new_mbrs)


    #Add a service string to a service member
    #if the service group do not exist, create it
    def add_member(self, cname, cgname):
        id = self.find_sg_id_by_name(cgname)
        #if the id do not exist, create the cg
        if id == None:
            cg = Servicegroup({'servicegroup_name' : cgname, 'alias' : cgname, 'members' :  cname})
            self.add_servicegroup(cg)
        else:
            self.servicegroups[id].add_string_member(cname)


    def is_correct(self):
        for id in self.servicegroups:
            self.servicegroups[id].is_correct()


    #Use to fill members with contactgroup_members
    def explode(self):
        for id in self.servicegroups:
            sg = self.servicegroups[id]
            if sg.has('servicegroup_members'):
                sg.get_services_by_explosion(self)
