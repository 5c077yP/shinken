

class Hostgroup:
    id = 0
    def __init__(self, params={}):
        self.id = self.__class__.id
        self.__class__.id += 1
        for key in params:
            setattr(self, key, params[key])


    def clean(self):
        pass


    def pythonize(self):
        mbrs = self.members.split(',')        
        self.members = []
        for mbr in mbrs:
            self.members.append(mbr.strip())


    def __str__(self):
        return str(self.__dict__)+'\n'


    def add_prop(self, prop, val):
        pass


    def get_hosts(self):
        return self.members


    def replace_members(self, members):
        self.members = members


    def add_string_member(self, member):
        self.members += ','+member


    #a host group is correct if all members actually exists
    def is_correct(self):
        return not None in self.members


    def has(self, prop):
        return hasattr(self,prop)


    def get_hostgroup_members(self):
        if self.has('hostgroup_members'):
            return self.hostgroup_members.split(',')
        else:
            return []


    #We fillfull properties with template ones if need
    def get_hosts_by_explosion(self, hostgroups):
        hg_mbrs = self.get_hostgroup_members()
        for hg_mbr in hg_mbrs:
            hg = hostgroups.find_hg_by_name(hg_mbr)
            if hg is not None:
                value = hg.get_hosts_by_explosion(hostgroups)
                if value is not None:
                    self.add_string_member(value)
            else:
                pass
        if self.has('members'):
            return self.members
        else:
            return ''


class Hostgroups:
    def __init__(self, hostgroups):
        self.hostgroups = {}
        for hg in hostgroups:
            self.hostgroups[hg.id] = hg


    def find_hg_id_by_name(self, name):
        for id in self.hostgroups:
            if self.hostgroups[id].hostgroup_name == name:
                return id
        return None


    def find_hg_by_name(self, name):
        id = self.find_hg_id_by_name(name)
        if id is not None:
            return self.hostgroups[id]
        else:
            return None


    def get_members_by_name(self, hgname):
        id = self.find_hg_id_by_name(hgname)
        if id == None:
            return []
        return self.hostgroups[id].get_hosts()

    
    def __str__(self):
        s = ''
        for id in self.hostgroups:
            s += str(self.hostgroups[id])
        return s

    
    def linkify(self, hosts=None):
        self.linkify_hg_by_hst(hosts)


    def add_hostgroup(self, hg):
        self.hostgroups[hg.id] = hg


    def pythonize(self):
        for hg in self.hostgroups.values():
            hg.pythonize()

    
    #We just search for each hostgroup the id of the hosts 
    #and replace the name by the id
    def linkify_hg_by_hst(self, hosts):
        for hg in self.hostgroups.values():
            mbrs = hg.get_hosts()
            #The new member list, in id
            new_mbrs = []
            for mbr in mbrs:
                new_mbrs.append(hosts.find_host_by_name(mbr))
            #We find the id, we remplace the names
            hg.replace_members(new_mbrs)


    #Add a host string to a hostgroup member
    #if the host group do not exist, create it
    def add_member(self, hname, hgname):
        id = self.find_hg_id_by_name(hgname)
        #if the id do not exist, create the hg
        if id == None:
            hg = Hostgroup({'hostgroup_name' : hgname, 'alias' : hgname, 'members' :  hname})
            self.add_hostgroup(hg)
        else:
            self.hostgroups[id].add_string_member(hname)

            
    def is_correct(self):
        for hg in self.hostgroups.values():
            hg.is_correct()


    #Use to fill members with hostgroup_members
    def explode(self):
        for hg in self.hostgroups.values():
            if hg.has('hostgroup_members'):
                hg.get_hosts_by_explosion(self)

